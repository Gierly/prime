(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-36f13302"],{9066:function(e,t,l){"use strict";l.d(t,"a",(function(){return c}));var n=l("d4ec"),o=l("bee2"),c=(l("d3b7"),function(){function e(){Object(n["a"])(this,e)}return Object(o["a"])(e,[{key:"getCountries",value:function(){return fetch("demo/data/countries.json").then((function(e){return e.json()})).then((function(e){return e.data}))}}]),e}())},"97be":function(e,t,l){"use strict";l.r(t);l("b0c0");var n=l("7a23"),o=l("2d77"),c=l.n(o),u={class:"content-section introduction"},i=Object(n["k"])("div",{class:"feature-intro"},[Object(n["k"])("h1",null,"AutoComplete"),Object(n["k"])("p",null,"AutoComplete is an input component that provides real-time suggestions when being typed.")],-1),r={class:"content-section implementation"},s={class:"card"},a=Object(n["k"])("h5",null,"Basic",-1),b=Object(n["k"])("h5",null,"Grouped",-1),d={class:"flex align-items-center country-item"},p=Object(n["k"])("h5",null,"Dropdown, Templating and Force Selection",-1),O={class:"country-item"},j=Object(n["k"])("h5",null,"Virtual Scroll (1000 Items)",-1),k=Object(n["k"])("h5",null,"Multiple",-1),m={class:"p-fluid"};function h(e,t,l,o,h,f){var v=Object(n["P"])("AppDemoActions"),g=Object(n["P"])("AutoComplete"),y=Object(n["P"])("AutoCompleteDoc");return Object(n["H"])(),Object(n["j"])("div",null,[Object(n["k"])("div",u,[i,Object(n["o"])(v)]),Object(n["k"])("div",r,[Object(n["k"])("div",s,[a,Object(n["o"])(g,{modelValue:h.selectedCountry1,"onUpdate:modelValue":t[0]||(t[0]=function(e){return h.selectedCountry1=e}),suggestions:h.filteredCountries,onComplete:t[1]||(t[1]=function(e){return f.searchCountry(e)}),optionLabel:"name"},null,8,["modelValue","suggestions"]),b,Object(n["o"])(g,{modelValue:h.selectedCity,"onUpdate:modelValue":t[2]||(t[2]=function(e){return h.selectedCity=e}),suggestions:h.filteredCities,onComplete:t[3]||(t[3]=function(e){return f.searchCity(e)}),optionLabel:"label",optionGroupLabel:"label",optionGroupChildren:"items"},{optiongroup:Object(n["Z"])((function(e){return[Object(n["k"])("div",d,[Object(n["k"])("img",{src:c.a,class:Object(n["A"])("flag flag-"+e.item.code.toLowerCase()),width:"18"},null,2),Object(n["k"])("div",null,Object(n["T"])(e.item.label),1)])]})),_:1},8,["modelValue","suggestions"]),p,Object(n["o"])(g,{modelValue:h.selectedCountry2,"onUpdate:modelValue":t[4]||(t[4]=function(e){return h.selectedCountry2=e}),loadingIcon:"pi pi-spinner",suggestions:h.filteredCountries,onComplete:t[5]||(t[5]=function(e){return f.searchCountry(e)}),dropdown:!0,optionLabel:"name",forceSelection:""},{item:Object(n["Z"])((function(e){return[Object(n["k"])("div",O,[Object(n["k"])("img",{src:c.a,class:Object(n["A"])("flag flag-"+e.item.code.toLowerCase())},null,2),Object(n["k"])("div",null,Object(n["T"])(e.item.name),1)])]})),_:1},8,["modelValue","suggestions"]),j,Object(n["o"])(g,{modelValue:h.selectedItem,"onUpdate:modelValue":t[6]||(t[6]=function(e){return h.selectedItem=e}),suggestions:h.filteredItems,onComplete:f.searchItems,virtualScrollerOptions:{itemSize:38},optionLabel:"label",dropdown:""},null,8,["modelValue","suggestions","onComplete"]),k,Object(n["k"])("span",m,[Object(n["o"])(g,{modelValue:h.selectedCountries,"onUpdate:modelValue":t[7]||(t[7]=function(e){return h.selectedCountries=e}),multiple:!0,suggestions:h.filteredCountries,onComplete:t[8]||(t[8]=function(e){return f.searchCountry(e)}),optionLabel:"name"},null,8,["modelValue","suggestions"])])])]),Object(n["o"])(y)])}var f=l("5530"),v=l("b85c"),g=l("2909"),y=(l("a630"),l("3ca3"),l("498a"),l("4de4"),l("d3b7"),l("2ca0"),l("9066")),C=Object(n["k"])("h5",null,"Import via Module",-1),w=Object(n["k"])("code",null,"\nimport AutoComplete from 'primevue/autocomplete';\n\n",-1),S=[w],I=Object(n["k"])("h5",null,"Import via CDN",-1),A=Object(n["k"])("code",null,'\n<script src="https://unpkg.com/primevue@^3/core/core.min.js"><\/script>\n<script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"><\/script>\n\n',-1),L=[A],M=Object(n["k"])("h5",null,"Getting Started",-1),F=Object(n["k"])("p",null," AutoComplete uses v-model for two-way binding, requires a list of suggestions and a complete method to query for the results. The complete method gets the query text as event.query property and should update the suggestions with the search results. Example below connects to a remote datasource to fetch the results; ",-1),q=Object(n["k"])("code",null,'\n<AutoComplete v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountry($event)" optionLabel="name" />\n\n',-1),P=[q],T=Object(n["k"])("code",null,"\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tselectedCountry: null,\n\t\t\tfilteredCountries: null\n\t\t}\n\t},\n\tcountryService: null,\n\tcreated() {\n\t\tthis.countryService = new CountryService();\n\t},\n\tmethods: {\n\t\tsearchCountry(event) {\n            this.filteredCountriesBasic = this.countryService.search(event.query);\n\t\t}\n\t}\n}\n\n",-1),D=[T],x=Object(n["k"])("h5",null,"Dropdown",-1),H=Object(n["k"])("p",null,[Object(n["n"])(" Enabling "),Object(n["k"])("i",null,"dropdown"),Object(n["n"])(' property displays a button next to the input field where click behavior of the button is defined using dropdownMode property that takes "blank" or "current" as possible values. "blank" is the default mode to send a query with an empty string whereas "current" setting sends a query with the current value of the input. ')],-1),V=Object(n["k"])("code",null,'\n<AutoComplete v-model="brand" :dropdown="true" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" />\n\n',-1),N=[V],B=Object(n["k"])("h5",null,"Multiple Mode",-1),G=Object(n["k"])("p",null,[Object(n["n"])("Multiple mode is enabled using "),Object(n["k"])("i",null,"multiple"),Object(n["n"])(" property to select more than one value from the autocomplete. In this case, value reference should be an array.")],-1),E=Object(n["k"])("code",null,'\n<AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountriesMultiple" @complete="searchCountryMultiple($event)" optionLabel="name" />\n\n',-1),U=[E],$=Object(n["k"])("h5",null,"Objects",-1),Y=Object(n["k"])("p",null,[Object(n["n"])(" AutoComplete can also work with objects using the "),Object(n["k"])("i",null,"optionLabel"),Object(n["n"])(' property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as {name:"United States",code:"USA"}. ')],-1),K=Object(n["k"])("code",null,'\n<AutoComplete optionLabel="label" v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountryBasic($event)" />\n\n',-1),J=[K],_=Object(n["k"])("h5",null,"Grouping",-1),W=Object(n["k"])("p",null,[Object(n["n"])("Options groups are specified with the "),Object(n["k"])("i",null,"optionGroupLabel"),Object(n["n"])(" and "),Object(n["k"])("i",null,"optionGroupChildren"),Object(n["n"])(" properties.")],-1),z=Object(n["k"])("code",null,"\nexport default {\n    data() {\n        return {\n            selectedGroupedCity: null,\n            groupedCities: [{\n                label: 'Germany', code: 'DE',\n                items: [\n                    {label: 'Berlin', value: 'Berlin'},\n                    {label: 'Frankfurt', value: 'Frankfurt'},\n                    {label: 'Hamburg', value: 'Hamburg'},\n                    {label: 'Munich', value: 'Munich'}\n                ]\n            },\n            {\n                label: 'USA', code: 'US',\n                items: [\n                    {label: 'Chicago', value: 'Chicago'},\n                    {label: 'Los Angeles', value: 'Los Angeles'},\n                    {label: 'New York', value: 'New York'},\n                    {label: 'San Francisco', value: 'San Francisco'}\n                ]\n            },\n            {\n                label: 'Japan', code: 'JP',\n                items: [\n                    {label: 'Kyoto', value: 'Kyoto'},\n                    {label: 'Osaka', value: 'Osaka'},\n                    {label: 'Tokyo', value: 'Tokyo'},\n                    {label: 'Yokohama', value: 'Yokohama'}\n                ]\n            }]\n        }\n    }\n}\n",-1),R=[z],Z=Object(n["k"])("code",null,[Object(n["k"])("template",null,[Object(n["n"])('\n<AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)"\n    optionLabel="label" optionGroupLabel="label" optionGroupChildren="items"></AutoComplete>\n')]),Object(n["n"])("\n")],-1),Q=[Z],X=Object(n["k"])("h5",null,"Force Selection",-1),ee=Object(n["k"])("p",null,[Object(n["n"])(" ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable "),Object(n["k"])("i",null,"forceSelection"),Object(n["n"])(" to enforce that input is always from the suggestion list. ")],-1),te=Object(n["k"])("code",null,'\n<AutoComplete forceSelection v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" />\n\n',-1),le=[te],ne=Object(n["k"])("h5",null,"Templating",-1),oe=Object(n["k"])("p",null,[Object(n["n"])(" Item template allows displaying custom content inside the suggestions panel. The slotProps variable passed to the template provides an item property to represent an item in the suggestions collection. In addition "),Object(n["k"])("i",null,"optiongroup"),Object(n["n"])(", "),Object(n["k"])("i",null,"chip"),Object(n["n"])(", "),Object(n["k"])("i",null,"header"),Object(n["n"])(" and "),Object(n["k"])("i",null,"footer"),Object(n["n"])(" slots are provided for further customization ")],-1),ce=Object(n["k"])("code",null,[Object(n["k"])("template",null,[Object(n["n"])('\n<AutoComplete v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" :dropdown="true">\n    <template #item="slotProps">\n\t\t<img :alt="slotProps.item" :src="\'demo/images/car/\' + slotProps.item + \'.png\'" />\n        <div>{{slotProps.item}}</div>\n\t</template>\n</AutoComplete>\n')]),Object(n["n"])("\n")],-1),ue=[ce],ie=Object(n["k"])("h5",null,"Properties",-1),re=Object(n["k"])("p",null,"Any property of HTMLDivElement are passed to the main container element. Following are the additional properties to configure the component.",-1),se={class:"doc-tablewrapper"},ae={class:"doc-table"},be=Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Name"),Object(n["k"])("th",null,"Type"),Object(n["k"])("th",null,"Default"),Object(n["k"])("th",null,"Description")])],-1),de=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"modelValue"),Object(n["k"])("td",null,"any"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Value of the component.")],-1),pe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"suggestions"),Object(n["k"])("td",null,"array"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"An array of suggestions to display.")],-1),Oe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"field"),Object(n["k"])("td",null,"any"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,[Object(n["n"])("Property name or getter function of a suggested object to resolve and display. "),Object(n["k"])("small",null,"*Deprecated since v3.16.0. Use 'optionLabel' property instead.")])],-1),je=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"optionLabel"),Object(n["k"])("td",null,"string | function"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Property name or getter function to use as the label of an option.")],-1),ke=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"optionDisabled"),Object(n["k"])("td",null,"string | function"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.")],-1),me=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"optionGroupLabel"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Property name or getter function to use as the label of an option group.")],-1),he=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"optionGroupChildren"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Property name or getter function that refers to the children options of option group.")],-1),fe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"scrollHeight"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"200px"),Object(n["k"])("td",null,"Maximum height of the suggestions panel.")],-1),ve=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"dropdown"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"Displays a button next to the input field when enabled.")],-1),ge=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"dropdownMode"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"blank"),Object(n["k"])("td",null,'Specifies the behavior dropdown button. Default "blank" mode sends an empty string and "current" mode sends the input value.')],-1),ye=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"autoHighlight"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,[Object(n["n"])("Highlights automatically the first item of the dropdown to be selected. "),Object(n["k"])("small",null,"*Deprecated since v3.16.0.")])],-1),Ce=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"multiple"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"Specifies if multiple values can be selected.")],-1),we=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"placeholder"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Default text to display when no option is selected.")],-1),Se=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"disabled"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"When present, it specifies that the component should be disabled.")],-1),Ie=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"dataKey"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"A property to uniquely identify an option.")],-1),Ae=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"minLength"),Object(n["k"])("td",null,"number"),Object(n["k"])("td",null,"1"),Object(n["k"])("td",null,"Minimum number of characters to initiate a search.")],-1),Le=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"delay"),Object(n["k"])("td",null,"number"),Object(n["k"])("td",null,"300"),Object(n["k"])("td",null,"Delay between keystrokes to wait before sending a query.")],-1),Me=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"appendTo"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"body"),Object(n["k"])("td",null,'A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are "body" for document body and "self" for the element itself.')],-1),Fe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"forceSelection"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.")],-1),qe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"completeOnFocus"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"Whether to run a query when input receives focus.")],-1),Pe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"inputId"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Identifier of the underlying input element.")],-1),Te=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"inputStyle"),Object(n["k"])("td",null,"any"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Inline style of the input field.")],-1),De=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"inputClass"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Style class of the input field.")],-1),xe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"inputProps"),Object(n["k"])("td",null,"object"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Uses to pass all properties of the HTMLInputElement/HTMLSpanElement to the focusable input element inside the component.")],-1),He=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"panelStyle"),Object(n["k"])("td",null,"any"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Inline style of the overlay panel.")],-1),Ve=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"panelClass"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Style class of the overlay panel.")],-1),Ne=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"panelProps"),Object(n["k"])("td",null,"object"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Uses to pass all properties of the HTMLDivElement to the overlay panel.")],-1),Be=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"loadingIcon"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"pi pi-spinner"),Object(n["k"])("td",null,"Icon class used when loading")],-1),Ge=Object(n["k"])("td",null,"virtualScrollerOptions",-1),Ee=Object(n["k"])("td",null,"object",-1),Ue=Object(n["k"])("td",null,"null",-1),$e=Object(n["n"])("Whether to use the virtualScroller feature. The properties of "),Ye=Object(n["n"])("VirtualScroller"),Ke=Object(n["n"])(" component can be used like an object in it."),Je=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"autoOptionFocus"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"true"),Object(n["k"])("td",null,"Whether to focus on the first visible or selected element when the overlay panel is shown.")],-1),_e=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"selectOnFocus"),Object(n["k"])("td",null,"boolean"),Object(n["k"])("td",null,"false"),Object(n["k"])("td",null,"When enabled, the focused option is selected.")],-1),We=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"searchLocale"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"undefined"),Object(n["k"])("td",null,"Locale to use in searching. The default locale is the host environment's current locale.")],-1),ze=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"searchMessage"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"{0} results are available"),Object(n["k"])("td",null,"Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration.")],-1),Re=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"selectionMessage"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"{0} items selected"),Object(n["k"])("td",null,"Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration.")],-1),Ze=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"emptySelectionMessage"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"No selected item"),Object(n["k"])("td",null,"Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration.")],-1),Qe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"emptySearchMessage"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"No results found"),Object(n["k"])("td",null,"Text to be displayed when filtering does not return any results. Defaults to value from PrimeVue locale configuration.")],-1),Xe=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"tabindex"),Object(n["k"])("td",null,"number"),Object(n["k"])("td",null,"0"),Object(n["k"])("td",null,"Index of the element in tabbing order.")],-1),et=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"aria-label"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Defines a string value that labels an interactive element.")],-1),tt=Object(n["k"])("tr",null,[Object(n["k"])("td",null,"aria-labelledby"),Object(n["k"])("td",null,"string"),Object(n["k"])("td",null,"null"),Object(n["k"])("td",null,"Establishes relationships between the component and label(s) where its value should be one or more element IDs.")],-1),lt=Object(n["k"])("h5",null,"Events",-1),nt=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Name"),Object(n["k"])("th",null,"Parameters"),Object(n["k"])("th",null,"Description")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,"change"),Object(n["k"])("td",null,[Object(n["n"])(" event.originalEvent: Original event "),Object(n["k"])("br"),Object(n["n"])(" event.value: Selected option value ")]),Object(n["k"])("td",null,"Callback to invoke on value change.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"focus"),Object(n["k"])("td",null,"event"),Object(n["k"])("td",null,"Callback to invoke when the component receives focus.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"blur"),Object(n["k"])("td",null,"event"),Object(n["k"])("td",null,"Callback to invoke when the component loses focus.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"item-select"),Object(n["k"])("td",null,[Object(n["n"])(" event.originalEvent: Browser event "),Object(n["k"])("br"),Object(n["n"])(" event.value: Selected item ")]),Object(n["k"])("td",null,"Callback to invoke when a suggestion is selected.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"item-unselect"),Object(n["k"])("td",null,[Object(n["n"])(" event.originalEvent: Browser event "),Object(n["k"])("br"),Object(n["n"])(" event.value: Unselected item ")]),Object(n["k"])("td",null,"Callback to invoke when a selected value is removed.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"dropdown-click"),Object(n["k"])("td",null,[Object(n["n"])(" event.originalEvent: browser event "),Object(n["k"])("br"),Object(n["n"])(" event.query: Current value of the input field ")]),Object(n["k"])("td",null,"Callback to invoke to when dropdown button is clicked.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"clear"),Object(n["k"])("td",null,"-"),Object(n["k"])("td",null,"Callback to invoke when input is cleared by the user.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"complete"),Object(n["k"])("td",null,[Object(n["n"])(" event.originalEvent: Browser event "),Object(n["k"])("br"),Object(n["n"])(" event.query: Value to search with ")]),Object(n["k"])("td",null,"Callback to invoke to search for suggestions.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"before-show"),Object(n["k"])("td",null,"-"),Object(n["k"])("td",null,"Callback to invoke before the overlay is shown.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"before-hide"),Object(n["k"])("td",null,"-"),Object(n["k"])("td",null,"Callback to invoke before the overlay is hidden.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"show"),Object(n["k"])("td",null,"-"),Object(n["k"])("td",null,"Callback to invoke when the overlay is shown.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"hide"),Object(n["k"])("td",null,"-"),Object(n["k"])("td",null,"Callback to invoke when the overlay is hidden.")])])])],-1),ot=Object(n["k"])("h5",null,"Slots",-1),ct=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Name"),Object(n["k"])("th",null,"Parameters")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,"chip"),Object(n["k"])("td",null,"value: A value in the selection")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"header"),Object(n["k"])("td",null,[Object(n["n"])(" value: Value of the component "),Object(n["k"])("br"),Object(n["n"])(" suggestions: Displayed options ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"footer"),Object(n["k"])("td",null,[Object(n["n"])(" value: Value of the component "),Object(n["k"])("br"),Object(n["n"])(" suggestions: Displayed options ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["n"])("item "),Object(n["k"])("small",null,"*Deprecated since v3.16.0")]),Object(n["k"])("td",null,[Object(n["n"])(" item: Option instance "),Object(n["k"])("br"),Object(n["n"])(" index: Index of the option ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"option"),Object(n["k"])("td",null,[Object(n["n"])(" option: Option instance "),Object(n["k"])("br"),Object(n["n"])(" index: Index of the option ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"optiongroup"),Object(n["k"])("td",null,[Object(n["n"])(" item: OptionGroup instance "),Object(n["k"])("small",null,"*Deprecated since v3.16.0"),Object(n["k"])("br"),Object(n["n"])(" option: OptionGroup instance "),Object(n["k"])("br"),Object(n["n"])(" index: Index of the option group ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"content"),Object(n["k"])("td",null,[Object(n["n"])(" items: An array of objects to display for virtualscroller"),Object(n["k"])("br"),Object(n["n"])(" styleClass: Style class of the component"),Object(n["k"])("br"),Object(n["n"])(" contentRef: Referance of the content"),Object(n["k"])("br"),Object(n["n"])(" getItemOptions: Options of the items ")])]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"loader"),Object(n["k"])("td",null,"options: Options of the loader items for virtualscroller")])])])],-1),ut=Object(n["k"])("h5",null,"Styling",-1),it=Object(n["k"])("p",null,"Following is the list of structural style classes",-1),rt=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Name"),Object(n["k"])("th",null,"Element")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete"),Object(n["k"])("td",null,"Container element")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-panel"),Object(n["k"])("td",null,"Overlay panel of suggestions.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-items"),Object(n["k"])("td",null,"List container of suggestions.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-item"),Object(n["k"])("td",null,"List item of a suggestion.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-token"),Object(n["k"])("td",null,"Element of a selected item in multiple mode.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-token-icon"),Object(n["k"])("td",null,"Close icon element of a selected item in multiple mode.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-autocomplete-token-label"),Object(n["k"])("td",null,"Label of a selected item in multiple mode.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,"p-overlay-open"),Object(n["k"])("td",null,"Container element when overlay is visible.")])])])],-1),st=Object(n["k"])("h5",null,"Accessibility",-1),at=Object(n["k"])("h6",null,"Screen Reader",-1),bt=Object(n["k"])("p",null,[Object(n["n"])(" Value to describe the component can either be provided via "),Object(n["k"])("i",null,"label"),Object(n["n"])(" tag combined with "),Object(n["k"])("i",null,"inputId"),Object(n["n"])(" prop or using "),Object(n["k"])("i",null,"aria-labelledby"),Object(n["n"])(", "),Object(n["k"])("i",null,"aria-label"),Object(n["n"])(" props. The input element has "),Object(n["k"])("i",null,"combobox"),Object(n["n"])(" role in addition to "),Object(n["k"])("i",null,"aria-autocomplete"),Object(n["n"])(", "),Object(n["k"])("i",null,"aria-haspopup"),Object(n["n"])(" and "),Object(n["k"])("i",null,"aria-expanded"),Object(n["n"])(" attributes. The relation between the input and the popup is created with "),Object(n["k"])("i",null,"aria-controls"),Object(n["n"])(" and "),Object(n["k"])("i",null,"aria-activedescendant"),Object(n["n"])(" attribute is used to instruct screen reader which option to read during keyboard navigation within the popup list. ")],-1),dt=Object(n["k"])("p",null,[Object(n["n"])("In multiple mode, chip list uses "),Object(n["k"])("i",null,"listbox"),Object(n["n"])(" role with "),Object(n["k"])("i",null,"aria-orientation"),Object(n["n"])(" set to horizontal whereas each chip has the "),Object(n["k"])("i",null,"option"),Object(n["n"])(" role with "),Object(n["k"])("i",null,"aria-label"),Object(n["n"])(" set to the label of the chip.")],-1),pt=Object(n["k"])("p",null,[Object(n["n"])(" The popup list has an id that refers to the "),Object(n["k"])("i",null,"aria-controls"),Object(n["n"])(" attribute of the input element and uses "),Object(n["k"])("i",null,"listbox"),Object(n["n"])(" as the role. Each list item has "),Object(n["k"])("i",null,"option"),Object(n["n"])(" role and an id to match the "),Object(n["k"])("i",null,"aria-activedescendant"),Object(n["n"])(" of the input element. ")],-1),Ot=Object(n["k"])("code",null,'\n<label for="ac1">Username</label>\n<AutoComplete inputId="ac1" />\n\n<span id="ac2">Email</span>\n<AutoComplete aria-labelledby="ac2" />\n\n<AutoComplete aria-label="City" />\n\n',-1),jt=[Ot],kt=Object(n["k"])("h6",null,"Closed State Keyboard Support",-1),mt=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Key"),Object(n["k"])("th",null,"Function")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"tab")]),Object(n["k"])("td",null,"Moves focus to the autocomplete element.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"any printable character")]),Object(n["k"])("td",null,"Opens the popup and moves focus to the first option.")])])])],-1),ht=Object(n["k"])("h6",null,"Popup Keyboard Support",-1),ft=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Key"),Object(n["k"])("th",null,"Function")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"tab")]),Object(n["k"])("td",null,"Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"shift"),Object(n["n"])(" + "),Object(n["k"])("i",null,"tab")]),Object(n["k"])("td",null,"Moves focus to the previous focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"enter")]),Object(n["k"])("td",null,"Selects the focused option and closes the popup, then moves focus to the autocomplete element.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"space")]),Object(n["k"])("td",null,"Selects the focused option and closes the popup, then moves focus to the autocomplete element.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"escape")]),Object(n["k"])("td",null,"Closes the popup, then moves focus to the autocomplete element.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"down arrow")]),Object(n["k"])("td",null,"Moves focus to the next option, if there is none then visual focus does not change.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"up arrow")]),Object(n["k"])("td",null,"Moves focus to the previous option, if there is none then visual focus does not change.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"alt"),Object(n["n"])(" + "),Object(n["k"])("i",null,"up arrow")]),Object(n["k"])("td",null,"Selects the focused option and closes the popup, then moves focus to the autocomplete element.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"left arrow")]),Object(n["k"])("td",null,"Removes the visual focus from the current option and moves input cursor to one character left.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"right arrow")]),Object(n["k"])("td",null,"Removes the visual focus from the current option and moves input cursor to one character right.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"home")]),Object(n["k"])("td",null,"Moves input cursor at the end, if not then moves focus to the first option.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"end")]),Object(n["k"])("td",null,"Moves input cursor at the beginning, if not then moves focus to the last option.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"pageUp")]),Object(n["k"])("td",null,"Jumps visual focus to first option.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"pageDown")]),Object(n["k"])("td",null,"Jumps visual focus to last option.")])])])],-1),vt=Object(n["k"])("h6",null,"Chips Input Keyboard Support",-1),gt=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Key"),Object(n["k"])("th",null,"Function")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"backspace")]),Object(n["k"])("td",null,"Deletes the previous chip if the input field is empty.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"left arrow")]),Object(n["k"])("td",null,"Moves focus to the previous chip if available and input field is empty.")])])])],-1),yt=Object(n["k"])("h6",null,"Chip Keyboard Support",-1),Ct=Object(n["k"])("div",{class:"doc-tablewrapper"},[Object(n["k"])("table",{class:"doc-table"},[Object(n["k"])("thead",null,[Object(n["k"])("tr",null,[Object(n["k"])("th",null,"Key"),Object(n["k"])("th",null,"Function")])]),Object(n["k"])("tbody",null,[Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"left arrow")]),Object(n["k"])("td",null,"Moves focus to the previous chip if available.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"right arrow")]),Object(n["k"])("td",null,"Moves focus to the next chip, if there is none then input field receives the focus.")]),Object(n["k"])("tr",null,[Object(n["k"])("td",null,[Object(n["k"])("i",null,"backspace")]),Object(n["k"])("td",null,"Deletes the chips and adds focus to the input field.")])])])],-1),wt=Object(n["k"])("h5",null,"Dependencies",-1),St=Object(n["k"])("p",null,"None.",-1);function It(e,t,l,o,c,u){var i=Object(n["P"])("router-link"),r=Object(n["P"])("AppDoc"),s=Object(n["Q"])("code");return Object(n["H"])(),Object(n["h"])(r,{name:"AutoCompleteDemo",sources:c.sources,service:["CountryService"],data:["countries"],github:"autocomplete/AutoCompleteDemo.vue"},{default:Object(n["Z"])((function(){return[C,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,S)),[[s,void 0,void 0,{script:!0}]]),I,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,L)),[[s]]),M,F,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,P)),[[s]]),Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,D)),[[s,void 0,void 0,{script:!0}]]),x,H,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,N)),[[s]]),B,G,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,U)),[[s]]),$,Y,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,J)),[[s]]),_,W,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,R)),[[s,void 0,void 0,{script:!0}]]),Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,Q)),[[s]]),X,ee,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,le)),[[s]]),ne,oe,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,ue)),[[s]]),ie,re,Object(n["k"])("div",se,[Object(n["k"])("table",ae,[be,Object(n["k"])("tbody",null,[de,pe,Oe,je,ke,me,he,fe,ve,ge,ye,Ce,we,Se,Ie,Ae,Le,Me,Fe,qe,Pe,Te,De,xe,He,Ve,Ne,Be,Object(n["k"])("tr",null,[Ge,Ee,Ue,Object(n["k"])("td",null,[$e,Object(n["o"])(i,{to:"/virtualscroller"},{default:Object(n["Z"])((function(){return[Ye]})),_:1}),Ke])]),Je,_e,We,ze,Re,Ze,Qe,Xe,et,tt])])]),lt,nt,ot,ct,ut,it,rt,st,at,bt,dt,pt,Object(n["ab"])((Object(n["H"])(),Object(n["j"])("pre",null,jt)),[[s]]),kt,mt,ht,ft,vt,gt,yt,Ct,wt,St]})),_:1},8,["sources"])}var At={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <div>\n            <h5>Basic</h5>\n            <AutoComplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name" />\n\n            <h5>Grouped</h5>\n            <AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <AutoComplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" optionLabel="name" forceSelection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtualScrollerOptions="{ itemSize: 38 }" optionLabel="label" dropdown />\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name" />\n            </span>\n        </div>\n    </div>\n</template>\n\n<script>\nimport CountryService from \'./service/CountryService\';\nimport {FilterService,FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    data() {\n        return {\n            countries: null,\n            selectedCountry1: null,\n            selectedCountry2: null,\n            selectedCity: null,\n            filteredCities: null,\n            filteredCountries: null,\n            selectedCountries: [],\n            selectedItem: null,\n            filteredItems: null,\n            groupedCities: [{\n                label: \'Germany\', code: \'DE\',\n                items: [\n                    {label: \'Berlin\', value: \'Berlin\'},\n                    {label: \'Frankfurt\', value: \'Frankfurt\'},\n                    {label: \'Hamburg\', value: \'Hamburg\'},\n                    {label: \'Munich\', value: \'Munich\'}\n                ]\n            },\n            {\n                label: \'USA\', code: \'US\',\n                items: [\n                    {label: \'Chicago\', value: \'Chicago\'},\n                    {label: \'Los Angeles\', value: \'Los Angeles\'},\n                    {label: \'New York\', value: \'New York\'},\n                    {label: \'San Francisco\', value: \'San Francisco\'}\n                ]\n            },\n            {\n                label: \'Japan\', code: \'JP\',\n                items: [\n                    {label: \'Kyoto\', value: \'Kyoto\'},\n                    {label: \'Osaka\', value: \'Osaka\'},\n                    {label: \'Tokyo\', value: \'Tokyo\'},\n                    {label: \'Yokohama\', value: \'Yokohama\'}\n                ]\n            }],\n            items: Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }))\n        }\n    },\n    countryService: null,\n    created() {\n        this.countryService = new CountryService();\n    },\n    mounted() {\n        this.countryService.getCountries().then(data => this.countries = data);\n    },\n    methods: {\n        searchCountry(event) {\n            setTimeout(() => {\n                if (!event.query.trim().length) {\n                    this.filteredCountries = [...this.countries];\n                }\n                else {\n                    this.filteredCountries = this.countries.filter((country) => {\n                        return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                    });\n                }\n            }, 250);\n        },\n        searchCity(event) {\n            let query = event.query;\n            let filteredCities = [];\n\n            for (let country of this.groupedCities) {\n                let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                if (filteredItems && filteredItems.length) {\n                    filteredCities.push({...country, ...{items: filteredItems}});\n                }\n            }\n\n            this.filteredCities = filteredCities;\n        },\n        searchItems(event) {\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    filteredItems.push(item);\n                }\n            }\n\n            this.filteredItems = filteredItems;\n        }\n    }\n}\n<\\/script>'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <div>\n            <h5>Basic</h5>\n            <AutoComplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name" />\n\n            <h5>Grouped</h5>\n            <AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <AutoComplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" optionLabel="name" forceSelection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtualScrollerOptions="{ itemSize: 38 }" optionLabel="label" dropdown />\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name" />\n            </span>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport CountryService from \'./service/CountryService\';\nimport {FilterService,FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            countryService.value.getCountries().then(data => countries.value = data);\n        })\n\n        const countries = ref();\n        const countryService = ref(new CountryService());\n        const selectedCountry1 = ref();\n        const selectedCountry2 = ref();\n        const selectedCity = ref();\n        const filteredCities = ref();\n        const filteredCountries = ref();\n        const selectedCountries = ref([]);\n        const selectedItem = ref();\n        const filteredItems = ref();\n        const groupedCities = ref ([{\n            label: \'Germany\', code: \'DE\',\n            items: [\n                {label: \'Berlin\', value: \'Berlin\'},\n                {label: \'Frankfurt\', value: \'Frankfurt\'},\n                {label: \'Hamburg\', value: \'Hamburg\'},\n                {label: \'Munich\', value: \'Munich\'}\n            ]\n        },\n        {\n            label: \'USA\', code: \'US\',\n            items: [\n                {label: \'Chicago\', value: \'Chicago\'},\n                {label: \'Los Angeles\', value: \'Los Angeles\'},\n                {label: \'New York\', value: \'New York\'},\n                {label: \'San Francisco\', value: \'San Francisco\'}\n            ]\n        },\n        {\n            label: \'Japan\', code: \'JP\',\n            items: [\n                {label: \'Kyoto\', value: \'Kyoto\'},\n                {label: \'Osaka\', value: \'Osaka\'},\n                {label: \'Tokyo\', value: \'Tokyo\'},\n                {label: \'Yokohama\', value: \'Yokohama\'}\n            ]\n        }]);\n        const items = Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }));\n\n        const searchCountry = (event) => {\n            setTimeout(() => {\n                if (!event.query.trim().length) {\n                    filteredCountries.value = [...countries.value];\n                }\n                else {\n                    filteredCountries.value = countries.value.filter((country) => {\n                        return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                    });\n                }\n            }, 250);\n        };\n        const searchCity = (event) => {\n            let query = event.query;\n            let newFilteredCities = [];\n\n            for (let country of groupedCities.value) {\n                let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                if (filteredItems && filteredItems.length) {\n                    newFilteredCities.push({...country, ...{items: filteredItems}});\n                }\n            }\n\n            filteredCities.value = newFilteredCities;\n        }\n        const searchItems = (event) => {\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let _filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    _filteredItems.push(item);\n                }\n            }\n\n            filteredItems.value = _filteredItems;\n        }\n\n        return { countries, countryService, selectedCountry1, selectedCountry2, selectedCity, filteredCities, filteredCountries, selectedCountries, groupedCities, searchCountry, searchCity, searchItems, selectedItem, filteredItems, items }\n    }\n}\n<\\/script>'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"><\\/script>\n        <script src="./CountryService.js"><\\/script>',content:'<div id="app">\n            <h5>Basic</h5>\n            <p-autocomplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name"></p-autocomplete>\n\n            <h5>Grouped</h5>\n            <p-autocomplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" optionLabel="label" option-group-label="label" option-group-children="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </p-autocomplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <p-autocomplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" optionLabel="name" force-selection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </p-autocomplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <p-autocomplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtual-scroller-options="{ itemSize: 38 }" optionLabel="label" dropdown></p-autocomplete>\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <p-autocomplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" optionLabel="name"></p-autocomplete>\n            </span>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n        const { FilterService,FilterMatchMode } = primevue.api;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    countryService.value.getCountries().then(data => countries.value = data);\n                })\n\n                const countries = ref();\n                const countryService = ref(new CountryService());\n                const selectedCountry1 = ref();\n                const selectedCountry2 = ref();\n                const selectedCity = ref();\n                const filteredCities = ref();\n                const filteredCountries = ref();\n                const selectedCountries = ref([]);\n                const selectedItem = ref();\n                const filteredItems = ref();\n                const groupedCities = ref ([{\n                    label: \'Germany\', code: \'DE\',\n                    items: [\n                        {label: \'Berlin\', value: \'Berlin\'},\n                        {label: \'Frankfurt\', value: \'Frankfurt\'},\n                        {label: \'Hamburg\', value: \'Hamburg\'},\n                        {label: \'Munich\', value: \'Munich\'}\n                    ]\n                },\n                {\n                    label: \'USA\', code: \'US\',\n                    items: [\n                        {label: \'Chicago\', value: \'Chicago\'},\n                        {label: \'Los Angeles\', value: \'Los Angeles\'},\n                        {label: \'New York\', value: \'New York\'},\n                        {label: \'San Francisco\', value: \'San Francisco\'}\n                    ]\n                },\n                {\n                    label: \'Japan\', code: \'JP\',\n                    items: [\n                        {label: \'Kyoto\', value: \'Kyoto\'},\n                        {label: \'Osaka\', value: \'Osaka\'},\n                        {label: \'Tokyo\', value: \'Tokyo\'},\n                        {label: \'Yokohama\', value: \'Yokohama\'}\n                    ]\n                }]);\n                const items = Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }));\n\n                const searchCountry = (event) => {\n                    setTimeout(() => {\n                        if (!event.query.trim().length) {\n                            filteredCountries.value = [...countries.value];\n                        }\n                        else {\n                            filteredCountries.value = countries.value.filter((country) => {\n                                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                            });\n                        }\n                    }, 250);\n                };\n                const searchCity = (event) => {\n                    let query = event.query;\n                    let newFilteredCities = [];\n\n                    for (let country of groupedCities.value) {\n                        let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                        if (filteredItems && filteredItems.length) {\n                            newFilteredCities.push({...country, ...{items: filteredItems}});\n                        }\n                    }\n\n                    filteredCities.value = newFilteredCities;\n                };\n                const searchItems = (event) => {\n                    //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n                    let query = event.query;\n                    let _filteredItems = [];\n\n                    for(let i = 0; i < this.items.length; i++) {\n                        let item = this.items[i];\n                        if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                            _filteredItems.push(item);\n                        }\n                    }\n\n                    filteredItems.value = _filteredItems;\n                }\n\n                return { countries, countryService, selectedCountry1, selectedCountry2, selectedCity, filteredCities, filteredCountries, selectedCountries, groupedCities, searchCountry, searchCity, searchItems, selectedItem, filteredItems, items }\n            },\n            components: {\n                "p-autocomplete": primevue.autocomplete\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>'}}}}},Lt=l("6b0d"),Mt=l.n(Lt);const Ft=Mt()(At,[["render",It]]);var qt=Ft,Pt=l("bcab"),Tt={data:function(){return{countries:null,selectedCountry1:null,selectedCountry2:null,selectedCity:null,filteredCities:null,filteredCountries:null,selectedCountries:[],selectedItem:null,filteredItems:null,groupedCities:[{label:"Germany",code:"DE",items:[{label:"Berlin",value:"Berlin"},{label:"Frankfurt",value:"Frankfurt"},{label:"Hamburg",value:"Hamburg"},{label:"Munich",value:"Munich"}]},{label:"USA",code:"US",items:[{label:"Chicago",value:"Chicago"},{label:"Los Angeles",value:"Los Angeles"},{label:"New York",value:"New York"},{label:"San Francisco",value:"San Francisco"}]},{label:"Japan",code:"JP",items:[{label:"Kyoto",value:"Kyoto"},{label:"Osaka",value:"Osaka"},{label:"Tokyo",value:"Tokyo"},{label:"Yokohama",value:"Yokohama"}]}],items:Array.from({length:1e3},(function(e,t){return{label:"Item #".concat(t),value:t}}))}},countryService:null,created:function(){this.countryService=new y["a"]},mounted:function(){var e=this;this.countryService.getCountries().then((function(t){return e.countries=t}))},methods:{searchCountry:function(e){var t=this;setTimeout((function(){e.query.trim().length?t.filteredCountries=t.countries.filter((function(t){return t.name.toLowerCase().startsWith(e.query.toLowerCase())})):t.filteredCountries=Object(g["a"])(t.countries)}),250)},searchCity:function(e){var t,l=e.query,n=[],o=Object(v["a"])(this.groupedCities);try{for(o.s();!(t=o.n()).done;){var c=t.value,u=Pt["c"].filter(c.items,["label"],l,Pt["a"].CONTAINS);u&&u.length&&n.push(Object(f["a"])(Object(f["a"])({},c),{items:u}))}}catch(i){o.e(i)}finally{o.f()}this.filteredCities=n},searchItems:function(e){for(var t=e.query,l=[],n=0;n<this.items.length;n++){var o=this.items[n];0===o.label.toLowerCase().indexOf(t.toLowerCase())&&l.push(o)}this.filteredItems=l}},components:{AutoCompleteDoc:qt}};const Dt=Mt()(Tt,[["render",h]]);t["default"]=Dt}}]);