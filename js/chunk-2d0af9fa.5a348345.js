(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0af9fa"],{"0eb1":function(e,t,n){"use strict";n.r(t);var l=n("7a23"),c={class:"content-section introduction"},o=Object(l["k"])("div",{class:"feature-intro"},[Object(l["k"])("h1",null,"ToggleButton"),Object(l["k"])("p",null,"ToggleButton is used to select a boolean value using a button.")],-1),u={class:"content-section implementation"},b={class:"card"},i=Object(l["k"])("h5",null,"Basic",-1),a=Object(l["k"])("h5",null,"Customized",-1);function r(e,t,n,r,s,d){var j=Object(l["P"])("AppDemoActions"),k=Object(l["P"])("ToggleButton"),O=Object(l["P"])("ToggleButtonDoc");return Object(l["H"])(),Object(l["j"])("div",null,[Object(l["k"])("div",c,[o,Object(l["o"])(j)]),Object(l["k"])("div",u,[Object(l["k"])("div",b,[i,Object(l["o"])(k,{modelValue:s.checked1,"onUpdate:modelValue":t[0]||(t[0]=function(e){return s.checked1=e}),onIcon:"pi pi-check",offIcon:"pi pi-times",class:"w-full sm:w-10rem","aria-label":"Confirmation"},null,8,["modelValue"]),a,Object(l["o"])(k,{modelValue:s.checked2,"onUpdate:modelValue":t[1]||(t[1]=function(e){return s.checked2=e}),onLabel:"I confirm",offLabel:"I reject",onIcon:"pi pi-check",offIcon:"pi pi-times",class:"w-full sm:w-10rem","aria-label":"do you confirm"},null,8,["modelValue"])])]),Object(l["o"])(O)])}var s=Object(l["k"])("h5",null,"Import via Module",-1),d=Object(l["k"])("code",null,"\nimport ToggleButton from 'primevue/togglebutton';\n\n",-1),j=[d],k=Object(l["k"])("h5",null,"Import via CDN",-1),O=Object(l["k"])("code",null,'\n<script src="https://unpkg.com/primevue@^3/core/core.min.js"><\/script>\n<script src="https://unpkg.com/primevue@^3/togglebutton/togglebutton.min.js"><\/script>\n\n',-1),p=[O],h=Object(l["k"])("h5",null,"Getting Started",-1),m=Object(l["k"])("p",null,"Two-way binding to a boolean property is defined using the standard v-model directive.",-1),f=Object(l["k"])("code",null,'\n<ToggleButton v-model="checked" />\n\n',-1),g=[f],v=Object(l["k"])("p",null,"As model is two-way binding enabled, setting the bound value as true displays the state as checked.",-1),w=Object(l["k"])("code",null,"\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tchecked: true\n\t\t}\n\t}\n}\n\n",-1),I=[w],y=Object(l["k"])("h5",null,"Labels and Icons",-1),B=Object(l["k"])("p",null,[Object(l["n"])("Icons and Labels can be customized using "),Object(l["k"])("i",null,"onLabel"),Object(l["n"])(", "),Object(l["k"])("i",null,"offLabel"),Object(l["n"])(", "),Object(l["k"])("i",null,"onIcon"),Object(l["n"])(" and "),Object(l["k"])("i",null,"offIcon"),Object(l["n"])(" properties.")],-1),T=Object(l["k"])("code",null,'\n<ToggleButton v-model="checked" onLabel="I confirm" offLabel="I reject" onIcon="pi pi-check" offIcon="pi pi-times" />\n\n',-1),L=[T],C=Object(l["k"])("h5",null,"Properties",-1),A=Object(l["k"])("p",null,"Any valid attribute is passed to the root element implicitly, extended properties are as follows;",-1),P=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Type"),Object(l["k"])("th",null,"Default"),Object(l["k"])("th",null,"Description")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"modelValue"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Value of the component.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"onIcon"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Icon for the on state.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"offIcon"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Icon for the off state.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"onLabel"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"yes"),Object(l["k"])("td",null,"Label for the on state.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"offLabel"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"no"),Object(l["k"])("td",null,"Label for the off state.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"iconPos"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"left"),Object(l["k"])("td",null,'Position of the icon, valid values are "left" and "right".')]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"disabled"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"When present, it specifies that the component should be disabled.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"tabindex"),Object(l["k"])("td",null,"number"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Index of the element in tabbing order.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputId"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Style class of the component input field.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputClass"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Style class of the input field.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputStyle"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Inline style of the input field.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputProps"),Object(l["k"])("td",null,"object"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component.")])])])],-1),D=Object(l["k"])("h5",null,"Events",-1),S=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Parameters"),Object(l["k"])("th",null,"Description")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"change"),Object(l["k"])("td",null,"event: Browser event"),Object(l["k"])("td",null,"Callback to invoke on value change.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"focus"),Object(l["k"])("td",null,"event: Browser event"),Object(l["k"])("td",null,"Callback to invoke when the component receives focus.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"blur"),Object(l["k"])("td",null,"event: Browser event"),Object(l["k"])("td",null,"Callback to invoke when the component loses focus.")])])])],-1),V=Object(l["k"])("h5",null,"Styling",-1),H=Object(l["n"])("Following is the list of structural style classes, for theming classes visit "),x=Object(l["n"])("theming"),N=Object(l["n"])(" page."),z=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Element")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-togglebutton"),Object(l["k"])("td",null,"Container element")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-button-icon"),Object(l["k"])("td",null,"Icon element.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-button-text"),Object(l["k"])("td",null,"Label element.")])])])],-1),M=Object(l["k"])("h5",null,"Accessibility",-1),E=Object(l["k"])("h6",null,"Screen Reader",-1),K=Object(l["k"])("p",null,[Object(l["n"])(" ToggleButton component uses an element with "),Object(l["k"])("i",null,"button"),Object(l["n"])(" role and updates "),Object(l["k"])("i",null,"aria-pressed"),Object(l["n"])(" state for screen readers. Value to describe the component can be defined with "),Object(l["k"])("i",null,"aria-labelledby"),Object(l["n"])(" or "),Object(l["k"])("i",null,"aria-label"),Object(l["n"])(" props, it is highly suggested to use either of these props as the component changes the label displayed which will result in screen readers to read different labels when the component receives focus. To prevent this, always provide an aria label that does not change related to state. ")],-1),R=Object(l["k"])("code",null,'\n<span id="rememberme">Remember Me</span>\n<ToggleButton aria-labelledby="rememberme" />\n\n<ToggleButton aria-label="Remember Me" />\n\n',-1),U=[R],F=Object(l["k"])("h6",null,"Keyboard Support",-1),J=Object(l["k"])("p",null,"Keyboard interaction is derived from the native browser handling of checkboxs in a group.",-1),Z=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Key"),Object(l["k"])("th",null,"Function")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,[Object(l["k"])("i",null,"tab")]),Object(l["k"])("td",null,"Moves focus to the button.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,[Object(l["k"])("i",null,"space")]),Object(l["k"])("td",null,"Toggles the checked state.")])])])],-1),_=Object(l["k"])("h5",null,"Dependencies",-1),G=Object(l["k"])("p",null,"None.",-1);function Q(e,t,n,c,o,u){var b=Object(l["P"])("router-link"),i=Object(l["P"])("AppDoc"),a=Object(l["Q"])("code");return Object(l["H"])(),Object(l["h"])(i,{name:"ToggleButtonDemo",sources:o.sources,github:"togglebutton/ToggleButtonDemo.vue"},{default:Object(l["Z"])((function(){return[s,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,j)),[[a,void 0,void 0,{script:!0}]]),k,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,p)),[[a]]),h,m,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,g)),[[a]]),v,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,I)),[[a,void 0,void 0,{script:!0}]]),y,B,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,L)),[[a]]),C,A,P,D,S,V,Object(l["k"])("p",null,[H,Object(l["o"])(b,{to:"/theming"},{default:Object(l["Z"])((function(){return[x]})),_:1}),N]),z,M,E,K,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,U)),[[a]]),F,J,Z,_,G]})),_:1},8,["sources"])}var W={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <h5>Basic</h5>\n        <ToggleButton v-model="checked1" onIcon="pi pi-check" offIcon="pi pi-times" class="w-full sm:w-10rem" aria-label="Confirmation" />\n\n        <h5>Customized</h5>\n        <ToggleButton v-model="checked2" onLabel="I confirm" offLabel="I reject" onIcon="pi pi-check" offIcon="pi pi-times" class="w-full sm:w-10rem" aria-label="do you confirm" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            checked1: false,\n            checked2: true\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <h5>Basic</h5>\n        <ToggleButton v-model="checked1" onIcon="pi pi-check" offIcon="pi pi-times" class="w-full sm:w-10rem" aria-label="Confirmation" />\n\n        <h5>Customized</h5>\n        <ToggleButton v-model="checked2" onLabel="I confirm" offLabel="I reject" onIcon="pi pi-check" offIcon="pi pi-times" class="w-full sm:w-10rem" aria-label="do you confirm" />\n    </div>\n</template>\n\n<script>\nimport { ref } from \'vue\';\n\nexport default {\n    setup() {\n        const checked1 = ref(false);\n        const checked2 = ref(true);\n\n        return { checked1, checked2 }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/togglebutton/togglebutton.min.js"><\\/script>',content:'<div id="app">\n            <h5>Basic</h5>\n            <p-togglebutton v-model="checked1" on-icon="pi pi-check" off-icon="pi pi-times" class="w-full sm:w-10rem" aria-label="Confirmation"></p-togglebutton>\n\n            <h5>Customized</h5>\n            <p-togglebutton v-model="checked2" on-label="I confirm" off-label="I reject" on-icon="pi pi-check" off-icon="pi pi-times" class="w-full sm:w-10rem" aria-label="do you confirm"></p-togglebutton>\n        </div>\n\n        <script type="module">\n        const { createApp, ref } = Vue;\n\n        const App = {\n            setup() {\n                const checked1 = ref(false);\n                const checked2 = ref(true);\n\n                return { checked1, checked2 }\n            },\n            components: {\n                "p-togglebutton": primevue.togglebutton\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}}},q=n("6b0d"),X=n.n(q);const Y=X()(W,[["render",Q]]);var $=Y,ee={data:function(){return{checked1:!1,checked2:!0}},components:{ToggleButtonDoc:$}};const te=X()(ee,[["render",r]]);t["default"]=te}}]);